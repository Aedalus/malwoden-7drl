{"version":3,"sources":["terrain.ts","logs.ts","globals.ts","stage.ts","prefabs.ts","generation/helpers.ts","generation/stage-1.ts","generation/stage-2.ts","generation/generation.ts","systems/levelSystem.ts","systems/RenderSystem.ts","systems/InputSystem.ts","systems/MovementSystem.ts","game.ts","damageFunction.ts","systems/AISystem.ts","systems/StairSystem.ts","systems/CacheSystem.ts","systems/CombatSystem.ts","systems/ViewSystem.ts","systems/ConsumableSystem.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["Terrain","LogLevel","TerrainCollision","none","tree","mountain","graveyard","hedge","TerrainGlyphs","Glyph","fromCharCode","CharCode","blackSquare","Color","Black","blackSpadeSuit","Green","blackUpPointingTriangle","Brown","upDownArrowWithBase","greekSmallLetterPi","FOWTerrainGlyphs","blendPercent","DimGray","DarkGray","TerrainBlocksVision","GameState","Direction","Log","maxLogs","entries","lastEntry","lastEntryCount","txt","this","addEntry","LOW","MID","HIGH","WARNING","logLevel","pop","push","length","shift","Stage","name","map","entities","startPos","entites","fow","fowVisited","Util","Table","width","height","e","filter","x","id","rng","Rand","AleaRNG","getScorpion","options","Math","random","toString","enemy","position","renderPriority","glyph","poundSign","AliceBlue","ai","collision","vision","stats","hp","maxHp","level","attack","armor","exp","getAnts","caret","getLadybug","lUpper","Red","getPlayer","player","incomingDamage","at","Yellow","getStairs","downwardsArrow","Cyan","stairs","getBerry","amount","nextItem","color","Purple","MediumPurple","bullet","consumable","getBook","equals","strokeTable","table","val","y","set","generateStage1","createPlayer","config","map_width","map_height","Generation","CellularAutomata","aliveValue","deadValue","randomize","doSimulationStep","connect","open","get","randomOpen","shuffle","rngPos","Prefab","i","enemies","nextBoolean","mUpper","Orange","berries","berry","books","book","winCondition","generateStage2","DrunkardsWalk","topology","walkSteps","steps","Infinity","maxCoveredTiles","sUpper","scorpions","selectStage","stage","Error","state","stageCount","posCache","Map","playerCache","undefined","help","currentGameState","GAME_START","restart","addEntryHigh","newLevel","getEXPForLevel","LevelSystem","find","bonus","round","logLevelColor","high","mid","White","low","Gray","warning","RenderSystem","mouse","Input","MouseHandler","terminal","mapTerminal","clear","playerViewshed","viewShed","area","GUI","box","title","origin","writeAt","drawBar","expNext","expLast","Gold","logColor","v","terrain","isInBounds","drawGlyph","drawCharCode","entitiesInSight","forEach","pos","sortedEntities","sort","a","b","infoEntities","localeCompare","min","fore","mousePos","getPos","termPos","pixelToChar","worldPos","has","selectedEntities","text","textPos","leftwardsArrow","DarkSlateGray","rightwardsArrow","drawLabel","GAME_WIN","wX","wY","mX","mY","winAnim","faceRight","dX","qX","qY","renderWon","GAME_LOSS","renderLost","isX","isY","cX","cY","renderHelp","render","percent","filledWidth","ceil","c","blend","PlayerInput","setInterval","InputSystem","currentPlayerInput","NONE","keyboard","KeyboardHandler","movement","KeyboardContext","onDown","KeyCode","DownArrow","DOWN","LeftArrow","LEFT","RightArrow","RIGHT","UpArrow","UP","Space","SPACE","Escape","ESC","H","HELP","setContext","wasInput","wantsToMove","directionVectors","MovementSystem","direction","stepPos","stepEntities","some","checkCombat","dirty","currentEntity","blockingEntities","otherFactionEntity","source","target","defence","totalDefence","calcDefence","power","totalAttack","calcAttack","damage","notifyDamage","dealDamage","AISystem","chaseAI","wanderAI","playerPos","route","Pathfinding","AStar","isBlockedCallback","compute","getDirectionFromVectors","console","warn","start","next","dx","dy","dir","getRandDirection","StairSystem","s","addEntryMid","addEntity","CacheSystem","key","CombatSystem","futureCorpse","addEntryWarning","check","makeCorpse","creature","incDamage","applyDamage","addEntryLow","checkAlive","ViewSystem","fov","FOV","PreciseShadowcasting","cartesianRange","lightPasses","tiles","calculateArray","t","ConsumableSystem","entitesOnSpace","consumed","removeEntity","renderSystem","inputSystem","movementSystem","aiSystem","stairSystem","cacheSystem","viewSystem","combatSystem","levelSystem","consumableSystem","App","requestRef","React","useRef","NaN","useEffect","mount","document","getElementById","Terminal","RetroTerminal","imageURL","charWidth","charHeight","mountNode","port","loop","current","window","requestAnimationFrame","AWAITING_INPUT","PLAYER_TURN","ENEMY_TURN","Game","cancelAnimationFrame","style","display","justifyContent","paddingTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.415cd374.chunk.js","sourcesContent":["import { CharCode, Color, Glyph } from \"malwoden\";\r\n\r\n// Level\r\nexport enum Terrain {\r\n  none = 0,\r\n  tree = 1,\r\n  mountain = 2,\r\n  graveyard = 3,\r\n  hedge = 4,\r\n}\r\n\r\nexport const TerrainCollision: { [e in Terrain]: boolean } = {\r\n  [Terrain.none]: false,\r\n  [Terrain.tree]: true,\r\n  [Terrain.mountain]: true,\r\n  [Terrain.graveyard]: true,\r\n  [Terrain.hedge]: true,\r\n};\r\n\r\nexport const TerrainGlyphs: { [e in Terrain]: Glyph | undefined } = {\r\n  [Terrain.none]: Glyph.fromCharCode(\r\n    CharCode.blackSquare,\r\n    Color.Black,\r\n    Color.Black\r\n  ),\r\n  [Terrain.tree]: Glyph.fromCharCode(CharCode.blackSpadeSuit, Color.Green),\r\n  [Terrain.mountain]: Glyph.fromCharCode(\r\n    CharCode.blackUpPointingTriangle,\r\n    Color.Brown\r\n  ),\r\n  [Terrain.graveyard]: Glyph.fromCharCode(CharCode.upDownArrowWithBase),\r\n  [Terrain.hedge]: Glyph.fromCharCode(CharCode.greekSmallLetterPi),\r\n};\r\n\r\nexport const FOWTerrainGlyphs: { [e in Terrain]: Glyph | undefined } = {\r\n  [Terrain.none]: Glyph.fromCharCode(\r\n    CharCode.blackSquare,\r\n    Color.Black.blendPercent(Color.DimGray, 50),\r\n    Color.Black.blendPercent(Color.DimGray, 50)\r\n  ),\r\n  [Terrain.tree]: Glyph.fromCharCode(\r\n    CharCode.blackSpadeSuit,\r\n    Color.Black.blendPercent(Color.DimGray, 20),\r\n    Color.Black.blendPercent(Color.DimGray, 50)\r\n  ),\r\n  [Terrain.mountain]: Glyph.fromCharCode(\r\n    CharCode.blackUpPointingTriangle,\r\n    Color.DarkGray\r\n  ),\r\n  [Terrain.graveyard]: Glyph.fromCharCode(CharCode.upDownArrowWithBase),\r\n  [Terrain.hedge]: Glyph.fromCharCode(CharCode.greekSmallLetterPi),\r\n};\r\n\r\n// Used by View System to calculate FOV\r\nexport const TerrainBlocksVision: { [e in Terrain]: boolean } = {\r\n  [Terrain.none]: false,\r\n  [Terrain.tree]: true,\r\n  [Terrain.mountain]: true,\r\n  [Terrain.graveyard]: true,\r\n  [Terrain.hedge]: true,\r\n};\r\n","export enum LogLevel {\r\n  LOW = \"low\",\r\n  MID = \"mid\",\r\n  HIGH = \"high\",\r\n  WARNING = \"warning\",\r\n}\r\n\r\nclass LogManifest {\r\n  maxLogs = 7;\r\n  entries: [LogLevel, string][] = [];\r\n  lastEntry: string = \"\";\r\n  lastEntryCount: number = 1;\r\n\r\n  addEntryLow(txt: string) {\r\n    this.addEntry(LogLevel.LOW, txt);\r\n  }\r\n\r\n  addEntryMid(txt: string) {\r\n    this.addEntry(LogLevel.MID, txt);\r\n  }\r\n\r\n  addEntryHigh(txt: string) {\r\n    this.addEntry(LogLevel.HIGH, txt);\r\n  }\r\n\r\n  addEntryWarning(txt: string) {\r\n    this.addEntry(LogLevel.WARNING, txt);\r\n  }\r\n\r\n  addEntry(logLevel: LogLevel, txt: string) {\r\n    if (txt === this.lastEntry) {\r\n      this.lastEntryCount++;\r\n      this.entries.pop();\r\n      this.entries.push([logLevel, `${txt} (x${this.lastEntryCount})`]);\r\n    } else {\r\n      this.entries.push([logLevel, txt]);\r\n      this.lastEntryCount = 1;\r\n    }\r\n\r\n    this.lastEntry = txt;\r\n    // Ensure we never go above max\r\n    while (this.entries.length > this.maxLogs) this.entries.shift();\r\n  }\r\n\r\n  length() {\r\n    return this.entries.length;\r\n  }\r\n}\r\n\r\nexport const Log = new LogManifest();\r\n","import { Entity } from \"./entities\";\r\nimport { Stage } from \"./stage\";\r\nimport { selectStage } from \"./generation/generation\";\r\nimport { Rand } from \"malwoden\";\r\nimport { Log } from \"./logs\";\r\n\r\nexport enum GameState {\r\n  GAME_START,\r\n  PLAYER_TURN,\r\n  ENEMY_TURN,\r\n  AWAITING_INPUT,\r\n  GAME_WIN,\r\n  GAME_LOSS,\r\n}\r\n\r\nexport enum Direction {\r\n  UP = \"up\",\r\n  DOWN = \"down\",\r\n  LEFT = \"left\",\r\n  RIGHT = \"right\",\r\n}\r\nconst startingStage = 1;\r\nexport const gameSeed = new Rand.AleaRNG();\r\n\r\ninterface GlobalState {\r\n  stageCount: number;\r\n  stage: Stage;\r\n  posCache: Map<string, Entity[]>;\r\n  playerCache: Entity | undefined;\r\n  help: boolean;\r\n  currentGameState: GameState;\r\n}\r\n\r\nexport const state: GlobalState = {\r\n  // The current level 'depth'\r\n  stageCount: 1,\r\n  // Stores the current level\r\n  stage: selectStage(startingStage),\r\n  // Allows quick lookup of entities.\r\n  // Should not be changed outside the cache system\r\n  posCache: new Map<string, Entity[]>(),\r\n  // Allows quick lookup of player entity.\r\n  // Should not be changed outside the cache system\r\n  playerCache: undefined,\r\n  // Toggle Help Screen\r\n  help: true,\r\n  // The state of the game\r\n  currentGameState: GameState.GAME_START,\r\n};\r\n\r\nexport function restart() {\r\n  Log.addEntryHigh(\"You are reborn. Let the snailing continue!\");\r\n  state.stageCount = 1;\r\n  const newLevel = selectStage(state.stageCount);\r\n  state.stage = newLevel;\r\n  state.currentGameState = GameState.GAME_START;\r\n}\r\n","import { Entity } from './entities';\r\nimport { Util, Vector2 } from 'malwoden';\r\nimport { Terrain } from './terrain';\r\n\r\nexport const map_width = 52;\r\nexport const map_height = 38;\r\n\r\nexport class Stage {\r\n  name: string;\r\n  startPos: Vector2;\r\n  entites: Entity[];\r\n  map: Util.Table<Terrain>;\r\n  fow: boolean;\r\n  fowVisited: Util.Table<boolean>;\r\n\r\n  constructor(\r\n    name: string,\r\n    map: Util.Table<Terrain>,\r\n    entities: Entity[],\r\n    startPos: Vector2,\r\n  ) {\r\n    this.name = name;\r\n    this.map = map;\r\n    this.entites = entities;\r\n    this.startPos = startPos;\r\n    this.fow = true;\r\n    this.fowVisited = new Util.Table(this.map.width, this.map.height);\r\n  }\r\n\r\n  addEntity(e: Entity) {\r\n    this.entites.push(e);\r\n  }\r\n\r\n  removeEntity(e: Entity) {\r\n    this.entites = this.entites.filter((x) => x.id !== e.id);\r\n  }\r\n}\r\n","import { Vector2, Glyph, CharCode, Color, Rand } from 'malwoden';\r\nimport { Entity } from './entities';\r\n\r\nconst rng = new Rand.AleaRNG();\r\n\r\ninterface EntityOptions {\r\n  position: Vector2;\r\n}\r\n\r\nexport function getBird(options: EntityOptions): Entity {\r\n  return {\r\n    id: Math.random().toString(),\r\n    name: 'Bird',\r\n    enemy: true,\r\n    position: options.position,\r\n    renderPriority: 2,\r\n    glyph: Glyph.fromCharCode(CharCode.rightwardsArrow, Color.Orange),\r\n    ai: 'chase',\r\n    collision: true,\r\n    vision: 6,\r\n    stats: {\r\n      hp: 10,\r\n      maxHp: 10,\r\n      level: 1,\r\n      attack: 4,\r\n      armor: 0,\r\n      exp: 0,\r\n    },\r\n  };\r\n}\r\n\r\nexport function getMantis(options: EntityOptions): Entity {\r\n  return {\r\n    id: Math.random().toString(),\r\n    name: 'Mantis',\r\n    enemy: true,\r\n    position: options.position,\r\n    renderPriority: 2,\r\n    glyph: Glyph.fromCharCode(CharCode.mUpper, Color.Orange),\r\n    // glyph: Glyph.fromCharCode(CharCode.squareRoot, Color.AliceBlue),\r\n    ai: 'chase',\r\n    collision: true,\r\n    vision: 6,\r\n    stats: {\r\n      hp: 3,\r\n      maxHp: 3,\r\n      level: 1,\r\n      attack: 3,\r\n      armor: 2,\r\n      exp: 20,\r\n    },\r\n  };\r\n}\r\n\r\nexport function getWeasle(options: EntityOptions): Entity {\r\n  return {\r\n    id: Math.random().toString(),\r\n    name: 'Wealse',\r\n    enemy: true,\r\n    position: options.position,\r\n    renderPriority: 2,\r\n    //glyph: Glyph.fromCharCode(CharCode.mUpper, Color.Orange),\r\n    glyph: Glyph.fromCharCode(CharCode.squareRoot, Color.AliceBlue),\r\n    ai: 'chase',\r\n    collision: true,\r\n    vision: 6,\r\n    stats: {\r\n      hp: 17,\r\n      maxHp: 17,\r\n      level: 1,\r\n      attack: 8,\r\n      armor: 3,\r\n      exp: 0,\r\n    },\r\n  };\r\n}\r\n\r\nexport function getScorpion(options: EntityOptions): Entity {\r\n  return {\r\n    id: Math.random().toString(),\r\n    //a boss\r\n    name: 'Scorpion',\r\n    enemy: true,\r\n    position: options.position,\r\n    renderPriority: 2,\r\n    //glyph: Glyph.fromCharCode(CharCode.mUpper, Color.Orange),\r\n    glyph: Glyph.fromCharCode(CharCode.poundSign, Color.AliceBlue),\r\n    ai: 'chase',\r\n    collision: true,\r\n    vision: 6,\r\n    stats: {\r\n      hp: 12,\r\n      maxHp: 12,\r\n      level: 1,\r\n      attack: 8,\r\n      armor: 4,\r\n      exp: 50,\r\n    },\r\n  };\r\n}\r\n\r\nexport function getAnts(options: EntityOptions): Entity {\r\n  return {\r\n    id: Math.random().toString(),\r\n    name: 'Ants',\r\n    enemy: true,\r\n    position: options.position,\r\n    renderPriority: 2,\r\n    //glyph: Glyph.fromCharCode(CharCode.mUpper, Color.Orange),\r\n    glyph: Glyph.fromCharCode(CharCode.caret, Color.AliceBlue),\r\n    ai: 'wander',\r\n    collision: true,\r\n    vision: 6,\r\n    stats: {\r\n      hp: 6,\r\n      maxHp: 6,\r\n      level: 1,\r\n      attack: 4,\r\n      armor: 3,\r\n      exp: 50,\r\n    },\r\n  };\r\n}\r\n\r\nexport function getSnake(options: EntityOptions): Entity {\r\n  return {\r\n    id: Math.random().toString(),\r\n    name: 'Snake',\r\n    enemy: true,\r\n    position: options.position,\r\n    renderPriority: 2,\r\n    glyph: Glyph.fromCharCode(CharCode.sUpper, Color.Green),\r\n    ai: 'chase',\r\n    collision: true,\r\n    vision: 6,\r\n    stats: {\r\n      hp: 5,\r\n      maxHp: 5,\r\n      level: 1,\r\n      attack: 5,\r\n      armor: 3,\r\n      exp: 70,\r\n    },\r\n  };\r\n}\r\n\r\nexport function getLadybug(options: EntityOptions): Entity {\r\n  return {\r\n    id: Math.random().toString(),\r\n    name: 'Ladybug',\r\n    enemy: true,\r\n    position: options.position,\r\n    renderPriority: 2,\r\n    glyph: Glyph.fromCharCode(CharCode.lUpper, Color.Red),\r\n    ai: 'wander',\r\n    collision: true,\r\n    stats: {\r\n      hp: 1,\r\n      maxHp: 1,\r\n      level: 1,\r\n      attack: 2,\r\n      armor: 2,\r\n      exp: 10,\r\n    },\r\n  };\r\n}\r\n\r\nexport function getPlayer(options: EntityOptions): Entity {\r\n  return {\r\n    id: Math.random().toString(),\r\n    name: 'Mal',\r\n    player: true,\r\n    position: options.position,\r\n    incomingDamage: [],\r\n    renderPriority: 1,\r\n    glyph: Glyph.fromCharCode(CharCode.at, Color.Yellow),\r\n    vision: 7,\r\n    collision: true,\r\n    stats: {\r\n      hp: 15,\r\n      maxHp: 15,\r\n      level: 1,\r\n      attack: 3,\r\n      armor: 1,\r\n      exp: 0,\r\n    },\r\n  };\r\n}\r\n\r\nexport function getRestartStairs(options: EntityOptions): Entity {\r\n  return {\r\n    id: Math.random().toString(),\r\n    name: 'Loop',\r\n    position: options.position,\r\n    renderPriority: 3,\r\n    glyph: Glyph.fromCharCode(CharCode.upwardsArrow, Color.Red),\r\n    stairs: true,\r\n    restart: true,\r\n  };\r\n}\r\n\r\nexport function getStairs(options: EntityOptions): Entity {\r\n  return {\r\n    id: Math.random().toString(),\r\n    name: 'Stairs',\r\n    position: options.position,\r\n    renderPriority: 3,\r\n    glyph: Glyph.fromCharCode(CharCode.downwardsArrow, Color.Cyan),\r\n    stairs: true,\r\n  };\r\n}\r\n\r\nexport function getBerry(options: EntityOptions): Entity {\r\n  const amount = rng.nextItem([1, 1, 1, 2]);\r\n  const color = amount === 1 ? Color.Purple : Color.MediumPurple;\r\n  return {\r\n    id: Math.random().toString(),\r\n    name: 'Berry',\r\n    position: options.position,\r\n    renderPriority: 4,\r\n    glyph: Glyph.fromCharCode(CharCode.bullet, color),\r\n    consumable: {\r\n      hp: amount,\r\n    },\r\n  };\r\n}\r\n\r\nexport function getBook(options: EntityOptions): Entity {\r\n  const amount = rng.nextItem([20, 20, 20, 30, 30, 50]);\r\n  return {\r\n    id: Math.random().toString(),\r\n    name: 'Snail Book',\r\n    position: options.position,\r\n    renderPriority: 4,\r\n    glyph: Glyph.fromCharCode(CharCode.equals, Color.Brown),\r\n    consumable: {\r\n      exp: amount,\r\n    },\r\n  };\r\n}\r\n\r\nexport function getMysticShell(options: EntityOptions): Entity {\r\n  return {\r\n    id: Math.random().toString(),\r\n    name: 'The Mystic Shell!',\r\n    position: options.position,\r\n    renderPriority: 4,\r\n    glyph: Glyph.fromCharCode(CharCode.at, Color.MediumPurple),\r\n    consumable: {\r\n      winCondition: true,\r\n    },\r\n  };\r\n}\r\n\r\n//traps\r\n","import { Util } from \"malwoden\";\r\n\r\nexport function strokeTable<T>(table: Util.Table<T>, val: T) {\r\n  for (let x = 0; x < table.width; x++) {\r\n    for (let y = 0; y < table.height; y++) {\r\n      if (\r\n        x === 0 ||\r\n        x === table.width - 1 ||\r\n        y === 0 ||\r\n        y === table.height - 1\r\n      ) {\r\n        table.set({ x, y }, val);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import * as Prefab from '../prefabs';\r\nimport { Stage } from '../stage';\r\nimport { Generation, Rand, Vector2 } from 'malwoden';\r\nimport { Terrain } from '../terrain';\r\nimport { strokeTable } from './helpers';\r\nimport { Entity } from '../entities';\r\n\r\ninterface Stage1Config {\r\n  name: string;\r\n  enemies: number;\r\n  berries: number;\r\n  books: number;\r\n}\r\nexport function generateStage1(\r\n  width: number,\r\n  height: number,\r\n  createPlayer: boolean,\r\n  config: Stage1Config,\r\n): Stage {\r\n  //generate seed\r\n  // Generate Terrain\r\n  const map_width = width;\r\n  const map_height = height;\r\n  const map = new Generation.CellularAutomata<Terrain>(map_width, map_height, {\r\n    aliveValue: Terrain.tree,\r\n    deadValue: Terrain.none,\r\n  });\r\n  map.randomize(0.63);\r\n  map.doSimulationStep(3);\r\n  map.connect();\r\n  strokeTable(map.table, Terrain.tree);\r\n\r\n  const open: Vector2[] = [];\r\n  for (let x = 0; x < map.table.width; x++) {\r\n    for (let y = 0; y < map.table.height; y++) {\r\n      if (map.table.get({ x, y }) === 0) open.push({ x, y });\r\n    }\r\n  }\r\n  const rng = new Rand.AleaRNG();\r\n  const randomOpen = rng.shuffle(open);\r\n  const entities: Entity[] = [];\r\n\r\n  let rngPos = 0;\r\n\r\n  const startPos = randomOpen[rngPos++];\r\n  // Generate Player if applicable, start pos either way\r\n  if (createPlayer) {\r\n    entities.push(Prefab.getPlayer({ position: startPos }));\r\n  }\r\n\r\n  // Generate Stairs\r\n  entities.push(Prefab.getStairs({ position: randomOpen[rngPos++] }));\r\n\r\n  // Generate Entities\r\n  for (let i = 0; i < config.enemies; i++) {\r\n    let e = rng.nextBoolean()\r\n      ? Prefab.getMantis({ position: randomOpen[rngPos++] })\r\n      : Prefab.getLadybug({ position: randomOpen[rngPos++] });\r\n    entities.push(e);\r\n  }\r\n\r\n  // Generate berries\r\n  for (let i = 0; i < config.berries; i++) {\r\n    const berry = Prefab.getBerry({ position: randomOpen[rngPos++] });\r\n    entities.push(berry);\r\n  }\r\n\r\n  // Generate book\r\n  for (let i = 0; i < config.books; i++) {\r\n    const book = Prefab.getBook({ position: randomOpen[rngPos++] });\r\n    entities.push(book);\r\n  }\r\n\r\n  // Tmp, generate mystic shell\r\n  entities.push(Prefab.getMysticShell({ position: randomOpen[rngPos++] }));\r\n\r\n  // Create level\r\n  return new Stage(config.name, map.table, entities, startPos);\r\n}\r\n","import * as Prefab from '../prefabs';\r\nimport { Stage } from '../stage';\r\nimport { Generation, Rand, Vector2 } from 'malwoden';\r\nimport { Terrain } from '../terrain';\r\nimport { strokeTable } from './helpers';\r\nimport { Entity } from '../entities';\r\n\r\ninterface Stage2Config {\r\n  name: string;\r\n  enemies: number;\r\n  scorpions: number;\r\n  berries: number;\r\n  books: number;\r\n}\r\n\r\nexport function generateStage2(\r\n  width: number,\r\n  height: number,\r\n  createPlayer: boolean,\r\n  config: Stage2Config,\r\n): Stage {\r\n  //generate seed\r\n  // Generate Terrain\r\n  const map_width = width;\r\n  const map_height = height;\r\n  const map = new Generation.DrunkardsWalk({\r\n    width: map_width,\r\n    height: map_height,\r\n    topology: 'four',\r\n  });\r\n  map.walkSteps({\r\n    steps: Infinity,\r\n    maxCoveredTiles: 1000,\r\n  });\r\n  for (let x = 0; x < map.table.width; x++) {\r\n    for (let y = 0; y < map.table.height; y++) {\r\n      const val = map.table.get({ x, y });\r\n      map.table.set({ x, y }, val ? Terrain.none : Terrain.mountain);\r\n    }\r\n  }\r\n  strokeTable(map.table, Terrain.mountain);\r\n\r\n  const open: Vector2[] = [];\r\n  for (let x = 0; x < map.table.width; x++) {\r\n    for (let y = 0; y < map.table.height; y++) {\r\n      if (map.table.get({ x, y }) === 0) open.push({ x, y });\r\n    }\r\n  }\r\n  const rng = new Rand.AleaRNG();\r\n  const randomOpen = rng.shuffle(open);\r\n  const entities: Entity[] = [];\r\n  let rngPos = 0;\r\n\r\n  // Generate Player if applicable, start pos either way\r\n  const startPos = randomOpen[rngPos++];\r\n  if (createPlayer) {\r\n    entities.push(Prefab.getPlayer({ position: startPos }));\r\n  }\r\n  // Generate Stairs\r\n  entities.push(Prefab.getStairs({ position: randomOpen[rngPos++] }));\r\n\r\n  // Generate Entities\r\n  for (let i = 0; i < config.enemies; i++) {\r\n    let e = rng.nextItem([\r\n      Prefab.getAnts({ position: randomOpen[rngPos++] }),\r\n      Prefab.getAnts({ position: randomOpen[rngPos++] }),\r\n      Prefab.getSnake({ position: randomOpen[rngPos++] }),\r\n    ])!;\r\n    entities.push(e);\r\n  }\r\n\r\n  // Generate scorpions\r\n  for (let i = 0; i < config.scorpions; i++) {\r\n    entities.push(Prefab.getScorpion({ position: randomOpen[rngPos++] }));\r\n  }\r\n\r\n  // Generate berries\r\n  for (let i = 0; i < config.berries; i++) {\r\n    const berry = Prefab.getBerry({ position: randomOpen[rngPos++] });\r\n    entities.push(berry);\r\n  }\r\n\r\n  // Generate book\r\n  for (let i = 0; i < config.books; i++) {\r\n    const book = Prefab.getBook({ position: randomOpen[rngPos++] });\r\n    entities.push(book);\r\n  }\r\n\r\n  // Create level\r\n  return new Stage(config.name, map.table, entities, startPos);\r\n}\r\n","import { map_height, map_width, Stage } from '../stage';\r\n\r\nimport { generateStage1 } from './stage-1';\r\nimport { generateStage2 } from './stage-2';\r\nimport { generateStage3 } from './stage-3';\r\n\r\nexport function selectStage(stage: number): Stage {\r\n  switch (stage) {\r\n    case 1:\r\n      return generateStage1(map_width, map_height, true, {\r\n        name: 'The Short Grass',\r\n        enemies: 7,\r\n        books: 1,\r\n        berries: 4,\r\n      });\r\n    case 2:\r\n      return generateStage1(map_width, map_height, false, {\r\n        name: 'The Tall Grass',\r\n        enemies: 10,\r\n        books: 1,\r\n        berries: 4,\r\n      });\r\n    case 3:\r\n      return generateStage2(map_width, map_height, false, {\r\n        name: 'The Gravel Path',\r\n        enemies: 10,\r\n        scorpions: 0,\r\n        berries: 10,\r\n        books: 1,\r\n      });\r\n    case 4:\r\n      return generateStage2(map_width, map_height, false, {\r\n        name: 'The Scorpion Den',\r\n        enemies: 7,\r\n        scorpions: 7,\r\n        berries: 8,\r\n        books: 3,\r\n      });\r\n  }\r\n  throw new Error('Stage ID not recognized!');\r\n}\r\n","import { Stage } from \"../stage\";\r\nimport { Log } from \"../logs\";\r\n\r\nexport function getEXPForLevel(level: number) {\r\n  return ((level * (level + 1)) / 2) * 100;\r\n}\r\nexport class LevelSystem {\r\n  loop(stage: Stage) {\r\n    const player = stage.entites.find((x) => x.player);\r\n    if (player && player.stats) {\r\n      const level = player.stats.level;\r\n      const exp = player.stats.exp;\r\n      const equa = getEXPForLevel(level);\r\n      if (equa <= exp) {\r\n        // this should generate a random chance at stats later down the line to provide a more mixed play. Or let the player choose the stats.\r\n        Log.addEntryHigh(\"You have leveled up!\");\r\n        const bonus = Math.round(Math.random());\r\n        player.stats.hp = player.stats.hp + 2 + bonus;\r\n        player.stats.maxHp = player.stats.maxHp + 2 + bonus;\r\n        player.stats.attack = player.stats.attack + 1;\r\n        player.stats.armor = player.stats.armor + 1;\r\n        player.stats.level = player.stats.level + 1;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Terminal, GUI, Input, Color, CharCode, Vector2 } from \"malwoden\";\r\nimport { Stage } from \"../stage\";\r\nimport { FOWTerrainGlyphs, TerrainGlyphs } from \"../terrain\";\r\nimport { Log, LogLevel } from \"../logs\";\r\nimport { GameState, state } from \"../globals\";\r\nimport { Entity } from \"../entities\";\r\nimport { getEXPForLevel } from \"./levelSystem\";\r\n\r\ninterface RenderSystemContext {\r\n  stage: Stage;\r\n  terminal: Terminal.RetroTerminal;\r\n  mapTerminal: Terminal.PortTerminal;\r\n}\r\n\r\nconst logLevelColor: { [l in LogLevel]: Color } = {\r\n  high: Color.Cyan,\r\n  mid: Color.White,\r\n  low: Color.Gray,\r\n  warning: Color.Red,\r\n};\r\n\r\nexport class RenderSystem {\r\n  mouse = new Input.MouseHandler();\r\n\r\n  loop({ terminal, mapTerminal }: RenderSystemContext) {\r\n    // Rendering\r\n    terminal.clear();\r\n    const player = state.stage.entites.find((x) => x.player);\r\n    const playerViewshed = player?.viewShed?.area || new Map<string, Vector2>();\r\n\r\n    // Player Box\r\n    GUI.box(terminal, {\r\n      title: \"Player\",\r\n      origin: { x: 0, y: 0 },\r\n      width: 15,\r\n      height: 20,\r\n    });\r\n    if (player) {\r\n      if (player.stats) {\r\n        terminal.writeAt(\r\n          { x: 2, y: 2 },\r\n          `HP: ${player.stats.hp}/${player.stats.maxHp}`\r\n        );\r\n        drawBar(\r\n          terminal,\r\n          { x: 2, y: 3 },\r\n          10,\r\n          player.stats.hp / player.stats.maxHp,\r\n          Color.Red\r\n        );\r\n        const expNext = getEXPForLevel(player.stats.level);\r\n        const expLast = getEXPForLevel(player.stats.level - 1);\r\n        terminal.writeAt({ x: 2, y: 5 }, `EXP`);\r\n        drawBar(\r\n          terminal,\r\n          { x: 2, y: 6 },\r\n          10,\r\n          (player.stats.exp - expLast) / expNext,\r\n          Color.Gold\r\n        );\r\n\r\n        terminal.writeAt({ x: 2, y: 9 }, `Level:  ${player.stats.level}`);\r\n        terminal.writeAt({ x: 2, y: 10 }, `Attack: ${player.stats.attack}`);\r\n        terminal.writeAt({ x: 2, y: 11 }, `Armor:  ${player.stats.armor}`);\r\n      }\r\n    }\r\n\r\n    terminal.writeAt({ x: 2, y: 18 }, \"(h) help\");\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Logs\r\n    // -------------------------------------------------------------------------\r\n    GUI.box(terminal, {\r\n      title: \"Log\",\r\n      origin: { x: 16, y: 40 },\r\n      width: 53,\r\n      height: 9,\r\n    });\r\n\r\n    for (let i = 0; i < Log.length(); i++) {\r\n      const [logLevel, txt] = Log.entries[i];\r\n      const logColor = logLevelColor[logLevel];\r\n      terminal.writeAt({ x: 17, y: 41 + i }, txt, logColor);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Draw World\r\n    // -------------------------------------------------------------------------\r\n    GUI.box(terminal, {\r\n      origin: { x: 16, y: 0 },\r\n      width: 53,\r\n      height: 39,\r\n    });\r\n    terminal.writeAt(\r\n      { x: 17, y: 0 },\r\n      ` Stage ${state.stageCount} | ${state.stage.name} `\r\n    );\r\n\r\n    for (let x = 0; x < state.stage.map.width; x++) {\r\n      for (let y = 0; y < state.stage.map.height; y++) {\r\n        const v = { x, y };\r\n        const terrain = state.stage.map.get({ x, y });\r\n\r\n        const isVisible =\r\n          state.stage.fowVisited.isInBounds(v) && state.stage.fowVisited.get(v);\r\n\r\n        if (!isVisible) {\r\n          mapTerminal.drawCharCode(\r\n            v,\r\n            CharCode.blackSquare,\r\n            Color.DimGray.blendPercent(Color.Black, 70),\r\n            Color.DimGray.blendPercent(Color.Black, 70)\r\n          );\r\n          continue;\r\n        }\r\n\r\n        // Draw FOW Terrain\r\n        if (terrain !== undefined) {\r\n          const glyph = FOWTerrainGlyphs[terrain];\r\n          if (glyph) {\r\n            mapTerminal.drawGlyph({ x, y }, glyph);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Calculate for player's viewshed\r\n\r\n    const entitiesInSight: Entity[] = [];\r\n    playerViewshed.forEach((pos) => {\r\n      const terrain = state.stage.map.get(pos);\r\n      const entities = state.posCache.get(`${pos.x}:${pos.y}`) || [];\r\n      entitiesInSight.push(...entities);\r\n\r\n      // Draw Revealed Terrain\r\n      if (terrain !== undefined) {\r\n        const glyph = TerrainGlyphs[terrain];\r\n        if (glyph) {\r\n          mapTerminal.drawGlyph(pos, glyph);\r\n        }\r\n      }\r\n      // Draw entities\r\n      if (entities?.length) {\r\n        const sortedEntities = entities.sort(\r\n          (a, b) => b.renderPriority - a.renderPriority\r\n        );\r\n        for (let e of sortedEntities) {\r\n          mapTerminal.drawGlyph(e.position, e.glyph);\r\n        }\r\n      }\r\n    });\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Info Box\r\n    // -------------------------------------------------------------------------\r\n    GUI.box(terminal, {\r\n      title: \"Info\",\r\n      origin: { x: 0, y: 21 },\r\n      width: 15,\r\n      height: 28,\r\n    });\r\n\r\n    // Info HP\r\n    const infoEntities = entitiesInSight\r\n      .filter((x) => x.enemy && x.stats) // Only get enemies with stats\r\n      .sort((a, b) => a.id.localeCompare(b.id)); // Sort to make sure we always render the same order\r\n\r\n    for (let i = 0; i < Math.min(infoEntities.length, 5); i++) {\r\n      const e = infoEntities[i];\r\n      const y = 23 + i * 3;\r\n      terminal.writeAt({ x: 2, y: y }, e.name);\r\n      drawBar(\r\n        terminal,\r\n        { x: 2, y: y + 1 },\r\n        10,\r\n        e.stats!.hp / e.stats!.maxHp,\r\n        e.glyph.fore\r\n      );\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Labels\r\n    // -------------------------------------------------------------------------\r\n    const mousePos = this.mouse.getPos();\r\n    const termPos = terminal.pixelToChar(mousePos);\r\n\r\n    // Offset for portTerminal\r\n\r\n    // World Position offset for port terminal\r\n    const worldPos = {\r\n      x: termPos.x - 17,\r\n      y: termPos.y - 1,\r\n    };\r\n\r\n    // Only draw the label if the player can see it\r\n    if (player?.viewShed?.area.has(`${worldPos.x}:${worldPos.y}`)) {\r\n      // console.log(worldPos);\r\n      const selectedEntities = state.posCache.get(\r\n        `${worldPos.x}:${worldPos.y}`\r\n      );\r\n      if (selectedEntities?.length) {\r\n        drawLabel(terminal, termPos, selectedEntities[0].name);\r\n      }\r\n    }\r\n\r\n    if (state.currentGameState === GameState.GAME_WIN) {\r\n      renderWon(mapTerminal);\r\n    }\r\n    if (state.currentGameState === GameState.GAME_LOSS) {\r\n      renderLost(mapTerminal);\r\n    }\r\n    // Render Help\r\n    if (state.help) {\r\n      renderHelp(terminal);\r\n    }\r\n\r\n    // Render Terminal\r\n    terminal.render();\r\n  }\r\n}\r\n\r\nfunction drawBar(\r\n  terminal: Terminal.BaseTerminal,\r\n  pos: Vector2,\r\n  width: number,\r\n  percent: number,\r\n  color: Color\r\n) {\r\n  const filledWidth = Math.ceil(width * percent);\r\n\r\n  for (let x = 0; x < width; x++) {\r\n    const isFilled = x <= filledWidth;\r\n    const c = isFilled ? color : color.blend(Color.Black);\r\n    terminal.drawCharCode(\r\n      { x: pos.x + x, y: pos.y },\r\n      CharCode.blackSquare,\r\n      c,\r\n      c\r\n    );\r\n  }\r\n}\r\n\r\nfunction drawLabel(\r\n  terminal: Terminal.BaseTerminal,\r\n  pos: Vector2,\r\n  text: string\r\n) {\r\n  if (pos.x < 50) {\r\n    const textPos = { x: pos.x + 3, y: pos.y };\r\n    terminal.drawCharCode(\r\n      { x: pos.x + 1, y: pos.y },\r\n      CharCode.leftwardsArrow,\r\n      Color.DarkSlateGray,\r\n      Color.White\r\n    );\r\n    terminal.drawCharCode(\r\n      { x: pos.x + 2, y: pos.y },\r\n      CharCode.blackSquare,\r\n      Color.White,\r\n      Color.DarkSlateGray\r\n    );\r\n    terminal.writeAt(textPos, text, Color.White, Color.DarkSlateGray);\r\n  } else {\r\n    terminal.drawCharCode(\r\n      {\r\n        x: pos.x - 1,\r\n        y: pos.y,\r\n      },\r\n      CharCode.rightwardsArrow,\r\n      Color.DarkSlateGray,\r\n      Color.White\r\n    );\r\n    terminal.drawCharCode(\r\n      {\r\n        x: pos.x - 2,\r\n        y: pos.y,\r\n      },\r\n      CharCode.blackSquare,\r\n      Color.White,\r\n      Color.DarkSlateGray\r\n    );\r\n    const textPos = { x: pos.x - 2 - text.length, y: pos.y };\r\n    terminal.writeAt(textPos, text, Color.White, Color.DarkSlateGray);\r\n  }\r\n}\r\n\r\nfunction renderHelp(terminal: Terminal.BaseTerminal) {\r\n  GUI.box(terminal, {\r\n    origin: { x: 2, y: 2 },\r\n    width: 65,\r\n    height: 45,\r\n    title: \"Help\",\r\n  });\r\n\r\n  // Intro Start X/Y\r\n  const isX = 5;\r\n  const isY = 6;\r\n\r\n  terminal.writeAt({ x: isX, y: isY }, \"Help\");\r\n  terminal.writeAt({ x: isX + 5, y: isY }, \"Mal the Snail\", Color.Yellow);\r\n  terminal.writeAt({ x: isX + 19, y: isY }, \"travel through the garden,\");\r\n\r\n  terminal.writeAt({ x: isX, y: isY + 2 }, \"and retrieve the \");\r\n  terminal.writeAt(\r\n    { x: isX + 17, y: isY + 2 },\r\n    \"Mystic Shell\",\r\n    Color.MediumPurple\r\n  );\r\n  terminal.writeAt({ x: isX + 29, y: isY + 2 }, \".\");\r\n\r\n  // Controls\r\n\r\n  const cX = 5;\r\n  const cY = 12;\r\n  terminal.writeAt({ x: cX, y: cY }, \"-- Controls --\", Color.Cyan);\r\n  terminal.writeAt({ x: cX, y: cY + 2 }, \"- Use ↑ ↓ ← → to move.\");\r\n  terminal.writeAt({ x: cX, y: cY + 4 }, \"- Use (Space) to skip a turn.\");\r\n  terminal.writeAt(\r\n    { x: cX, y: cY + 6 },\r\n    \"- Move into an enemy to attack them.\"\r\n  );\r\n  terminal.writeAt(\r\n    { x: cX, y: cY + 8 },\r\n    \"- Hover over objects to see a description.\"\r\n  );\r\n\r\n  // Quit\r\n  const qX = 47;\r\n  const qY = 45;\r\n  terminal.writeAt({ x: qX, y: qY }, \"Press (esc) to \");\r\n  terminal.writeAt({ x: qX + 15, y: qY }, \"@_,\", Color.Yellow);\r\n}\r\n\r\nconst winAnim = {\r\n  faceRight: true,\r\n  dX: 0,\r\n};\r\n\r\nsetInterval(() => {\r\n  if (state.currentGameState !== GameState.GAME_WIN) {\r\n    winAnim.faceRight = true;\r\n    winAnim.dX = 0;\r\n    return;\r\n  }\r\n  if (winAnim.faceRight) {\r\n    if (winAnim.dX < 25) {\r\n      winAnim.dX++;\r\n    } else {\r\n      winAnim.faceRight = false;\r\n    }\r\n  } else {\r\n    if (winAnim.dX > 0) {\r\n      winAnim.dX--;\r\n    } else {\r\n      winAnim.faceRight = true;\r\n    }\r\n  }\r\n}, 150);\r\n\r\nfunction renderWon(terminal: Terminal.PortTerminal) {\r\n  terminal.clear();\r\n\r\n  const wX = 12;\r\n  const wY = 15;\r\n\r\n  terminal.writeAt({ x: wX, y: wY }, \"Mal\", Color.Yellow);\r\n  terminal.writeAt({ x: wX + 4, y: wY }, \"found the\");\r\n  terminal.writeAt({ x: wX + 14, y: wY }, \"Mystic Shell!\", Color.MediumPurple);\r\n\r\n  const mX = 12;\r\n  const mY = 10;\r\n\r\n  if (winAnim.faceRight) {\r\n    terminal.writeAt({ x: mX + winAnim.dX, y: mY }, \"@\", Color.MediumPurple);\r\n    terminal.writeAt({ x: mX + 1 + winAnim.dX, y: mY }, \"_,\", Color.Yellow);\r\n  } else {\r\n    terminal.writeAt({ x: mX - 3 + winAnim.dX, y: mY }, \",_\", Color.Yellow);\r\n    terminal.writeAt(\r\n      { x: mX - 1 + winAnim.dX, y: mY },\r\n      \"@\",\r\n      Color.MediumPurple\r\n    );\r\n  }\r\n\r\n  terminal.writeAt(\r\n    { x: 5, y: 20 },\r\n    \"With the shell's wisdom, the snail kingdom\"\r\n  );\r\n  terminal.writeAt({ x: 7, y: 22 }, \"would propser under a new golden age.\");\r\n  terminal.writeAt({ x: 12, y: 26 }, \"Not the fastest golden age,\");\r\n  terminal.writeAt({ x: 15, y: 28 }, \"but good nonetheless.\");\r\n\r\n  // Quit\r\n  const qX = 25;\r\n  const qY = 35;\r\n  terminal.writeAt({ x: qX, y: qY }, \"Press (esc) to \");\r\n  terminal.writeAt({ x: qX + 15, y: qY }, \"@_,\", Color.Yellow);\r\n  terminal.writeAt({ x: qX + 19, y: qY }, \"again!\");\r\n}\r\n\r\nfunction renderLost(terminal: Terminal.PortTerminal) {\r\n  terminal.clear();\r\n\r\n  const wX = 20;\r\n  const wY = 15;\r\n\r\n  terminal.writeAt({ x: wX, y: wY }, \"Mal\", Color.Yellow);\r\n  terminal.writeAt({ x: wX + 4, y: wY }, \"has\");\r\n  terminal.writeAt({ x: wX + 8, y: wY }, \"Died!\", Color.Red);\r\n\r\n  const mX = 24;\r\n  const mY = 10;\r\n\r\n  terminal.writeAt({ x: mX + winAnim.dX, y: mY }, \"@_,\", Color.Red);\r\n\r\n  // Quit\r\n  const qX = 25;\r\n  const qY = 35;\r\n  terminal.writeAt({ x: qX, y: qY }, \"Press (esc) to \");\r\n  terminal.writeAt({ x: qX + 15, y: qY }, \"@_,\", Color.Yellow);\r\n  terminal.writeAt({ x: qX + 19, y: qY }, \"again!\");\r\n}\r\n","import { Input } from \"malwoden\";\r\nimport { Direction, GameState, restart } from \"../globals\";\r\nimport { Stage } from \"../stage\";\r\nimport { state } from \"../globals\";\r\n\r\nenum PlayerInput {\r\n  NONE,\r\n  UP,\r\n  DOWN,\r\n  LEFT,\r\n  RIGHT,\r\n  SPACE,\r\n  ESC,\r\n  HELP,\r\n}\r\n\r\nexport class InputSystem {\r\n  currentPlayerInput: PlayerInput = PlayerInput.NONE;\r\n\r\n  constructor() {\r\n    const keyboard = new Input.KeyboardHandler();\r\n    const movement = new Input.KeyboardContext()\r\n      .onDown(\r\n        Input.KeyCode.DownArrow,\r\n        () => (this.currentPlayerInput = PlayerInput.DOWN)\r\n      )\r\n      .onDown(\r\n        Input.KeyCode.LeftArrow,\r\n        () => (this.currentPlayerInput = PlayerInput.LEFT)\r\n      )\r\n      .onDown(\r\n        Input.KeyCode.RightArrow,\r\n        () => (this.currentPlayerInput = PlayerInput.RIGHT)\r\n      )\r\n      .onDown(\r\n        Input.KeyCode.UpArrow,\r\n        () => (this.currentPlayerInput = PlayerInput.UP)\r\n      )\r\n      .onDown(\r\n        Input.KeyCode.Space,\r\n        () => (this.currentPlayerInput = PlayerInput.SPACE)\r\n      )\r\n      .onDown(\r\n        Input.KeyCode.Escape,\r\n        () => (this.currentPlayerInput = PlayerInput.ESC)\r\n      )\r\n      .onDown(\r\n        Input.KeyCode.H,\r\n        () => (this.currentPlayerInput = PlayerInput.HELP)\r\n      );\r\n\r\n    keyboard.setContext(movement);\r\n  }\r\n\r\n  // Returns true if player input was detected\r\n  loop(stage: Stage): boolean {\r\n    if (this.currentPlayerInput === PlayerInput.NONE) return false;\r\n    const player = stage.entites.find((x) => x.player)!;\r\n\r\n    let wasInput = false;\r\n\r\n    if (this.currentPlayerInput === PlayerInput.HELP) {\r\n      state.help = true;\r\n      wasInput = false;\r\n    }\r\n    if (this.currentPlayerInput === PlayerInput.ESC) {\r\n      if (state.help) {\r\n        state.help = false;\r\n      }\r\n      if (\r\n        state.currentGameState === GameState.GAME_WIN ||\r\n        state.currentGameState === GameState.GAME_LOSS\r\n      ) {\r\n        restart();\r\n      }\r\n      wasInput = false;\r\n    } else if (this.currentPlayerInput === PlayerInput.SPACE) {\r\n      // Normal Movement!\r\n      // Space to wait\r\n      wasInput = true;\r\n    } else if (this.currentPlayerInput === PlayerInput.UP) {\r\n      // Direction Keys\r\n      player.wantsToMove = Direction.UP;\r\n      wasInput = true;\r\n    } else if (this.currentPlayerInput === PlayerInput.DOWN) {\r\n      player.wantsToMove = Direction.DOWN;\r\n      wasInput = true;\r\n    } else if (this.currentPlayerInput === PlayerInput.RIGHT) {\r\n      player.wantsToMove = Direction.RIGHT;\r\n      wasInput = true;\r\n    } else if (this.currentPlayerInput === PlayerInput.LEFT) {\r\n      player.wantsToMove = Direction.LEFT;\r\n      wasInput = true;\r\n    }\r\n\r\n    // Make sure we reset the player input\r\n    this.currentPlayerInput = PlayerInput.NONE;\r\n    return wasInput;\r\n  }\r\n}\r\n","import { Vector2 } from \"malwoden\";\r\nimport { Direction, state } from \"../globals\";\r\nimport { Stage } from \"../stage\";\r\nimport { TerrainCollision } from \"../terrain\";\r\nimport { Entity } from \"../entities\";\r\nimport { dealDamage } from \"../damageFunction\";\r\n\r\nconst directionVectors = {\r\n  [Direction.UP]: { x: 0, y: -1 },\r\n  [Direction.DOWN]: { x: 0, y: 1 },\r\n  [Direction.LEFT]: { x: -1, y: 0 },\r\n  [Direction.RIGHT]: { x: 1, y: 0 },\r\n};\r\n\r\nexport class MovementSystem {\r\n  loop(stage: Stage) {\r\n    //sets up monsters that can be collided with.\r\n    for (let e of stage.entites) {\r\n      if (e.wantsToMove) {\r\n        // Get direction, the reset wants to move\r\n        const direction = directionVectors[e.wantsToMove];\r\n        e.wantsToMove = undefined;\r\n\r\n        //where e wants to go.\r\n        const stepPos: Vector2 = {\r\n          x: e.position.x + direction.x,\r\n          y: e.position.y + direction.y,\r\n        };\r\n\r\n        // Check entities\r\n        const stepEntities =\r\n          state.posCache.get(`${stepPos.x}:${stepPos.y}`) || [];\r\n        const entitiesBlocking = stepEntities.some((x) => x.collision);\r\n        if (entitiesBlocking) {\r\n          // Check combat\r\n          this.checkCombat(e, stepEntities);\r\n          continue;\r\n        }\r\n\r\n        // Check terrain\r\n        const terrain = stage.map.get(stepPos);\r\n        const terrainBlocking = terrain ? TerrainCollision[terrain] : false;\r\n        if (terrainBlocking) {\r\n          continue;\r\n        }\r\n\r\n        // Nothing blocking, adjust position\r\n        e.position.x += direction.x;\r\n        e.position.y += direction.y;\r\n\r\n        // Recalculate view if necessary\r\n        if (e.vision && e.viewShed) {\r\n          e.viewShed.dirty = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Converts a movement into a melee attack if applicable\r\n  checkCombat(currentEntity: Entity, blockingEntities: Entity[]) {\r\n    const otherFactionEntity = blockingEntities.find(\r\n      (x) => x.enemy !== currentEntity.enemy && x.stats\r\n    );\r\n\r\n    if (otherFactionEntity && otherFactionEntity.stats) {\r\n      dealDamage(currentEntity, otherFactionEntity);\r\n    }\r\n  }\r\n}\r\n","import { Terminal } from \"malwoden\";\r\nimport { RenderSystem } from \"./systems/RenderSystem\";\r\nimport { InputSystem } from \"./systems/InputSystem\";\r\nimport { MovementSystem } from \"./systems/MovementSystem\";\r\nimport { Log } from \"./logs\";\r\nimport { GameState } from \"./globals\";\r\nimport { AISystem } from \"./systems/AISystem\";\r\nimport { StairSystem } from \"./systems/StairSystem\";\r\nimport { CacheSystem } from \"./systems/CacheSystem\";\r\nimport { CombatSystem } from \"./systems/CombatSystem\";\r\nimport { map_height, map_width } from \"./stage\";\r\nimport { state } from \"./globals\";\r\nimport { ViewSystem } from \"./systems/ViewSystem\";\r\nimport { LevelSystem } from \"./systems/levelSystem\";\r\nimport { ConsumableSystem } from \"./systems/ConsumableSystem\";\r\n\r\n// Globals\r\nlet terminal: Terminal.RetroTerminal;\r\nlet mapTerminal: Terminal.PortTerminal;\r\n\r\n// Systems\r\nconst renderSystem = new RenderSystem();\r\nconst inputSystem = new InputSystem();\r\nconst movementSystem = new MovementSystem();\r\nconst aiSystem = new AISystem();\r\nconst stairSystem = new StairSystem();\r\nconst cacheSystem = new CacheSystem();\r\nconst viewSystem = new ViewSystem();\r\nconst combatSystem = new CombatSystem();\r\nconst levelSystem = new LevelSystem();\r\nconst consumableSystem = new ConsumableSystem();\r\n\r\nexport function init(term: Terminal.RetroTerminal) {\r\n  terminal = term;\r\n  mapTerminal = terminal.port({ x: 17, y: 1 }, map_width, map_height);\r\n\r\n  Log.addEntryHigh(\"Game Start!\");\r\n\r\n  // Render once to start\r\n  renderSystem.loop({\r\n    stage: state.stage,\r\n    mapTerminal,\r\n    terminal,\r\n  });\r\n}\r\n\r\nexport function loop() {\r\n  // Cache System should always run first to build up cache\r\n  cacheSystem.loop();\r\n\r\n  if (\r\n    state.currentGameState === GameState.GAME_WIN ||\r\n    state.currentGameState === GameState.GAME_LOSS\r\n  ) {\r\n    // Input, render, return\r\n    inputSystem.loop(state.stage);\r\n    renderSystem.loop({\r\n      stage: state.stage,\r\n      mapTerminal,\r\n      terminal,\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Input System\r\n  if (state.currentGameState === GameState.AWAITING_INPUT) {\r\n    const wasInput = inputSystem.loop(state.stage);\r\n    if (wasInput) state.currentGameState = GameState.PLAYER_TURN;\r\n  }\r\n\r\n  // Logic Systems\r\n  movementSystem.loop(state.stage);\r\n  consumableSystem.loop(state.stage);\r\n  stairSystem.loop(state.stage);\r\n  viewSystem.loop(state.stage);\r\n  combatSystem.loop(state.stage);\r\n  levelSystem.loop(state.stage);\r\n\r\n  if (state.currentGameState === GameState.ENEMY_TURN) {\r\n    aiSystem.loop(state.stage);\r\n  }\r\n\r\n  // Transition between needed states\r\n  // Keep logic above, this is just for automatic\r\n  // transitions between states\r\n  if (state.currentGameState === GameState.GAME_START) {\r\n    state.currentGameState = GameState.AWAITING_INPUT;\r\n  } else if (state.currentGameState === GameState.PLAYER_TURN) {\r\n    state.currentGameState = GameState.ENEMY_TURN;\r\n  } else if (state.currentGameState === GameState.ENEMY_TURN) {\r\n    state.currentGameState = GameState.AWAITING_INPUT;\r\n  }\r\n\r\n  // Render comes very last\r\n  renderSystem.loop({\r\n    stage: state.stage,\r\n    mapTerminal,\r\n    terminal,\r\n  });\r\n}\r\n","import { Entity } from './entities';\r\n\r\nfunction notifyDamage(source: string, power: number, target: Entity) {\r\n  if (!target.incomingDamage) {\r\n    target.incomingDamage = [];\r\n  }\r\n  target.incomingDamage?.push({ source, damage: power });\r\n}\r\n\r\nfunction calcAttack(source: Entity): number {\r\n  let totalAttack = 0;\r\n  if (source.stats) {\r\n    totalAttack = source.stats.attack;\r\n  }\r\n\r\n  return totalAttack;\r\n}\r\n\r\nfunction calcDefence(target: Entity): number {\r\n  let totalDefence = 0;\r\n  if (target.stats) {\r\n    //verifies that target has stats and is a valid target.\r\n    totalDefence = totalDefence + target.stats?.armor;\r\n  }\r\n\r\n  return totalDefence;\r\n}\r\n\r\nexport function dealDamage(source: Entity, target: Entity) {\r\n  let defence; //setup for more complicated defence formula.\r\n  let attack; //setup for comre complicated attack formula.\r\n\r\n  defence = calcDefence(target);\r\n  attack = calcAttack(source);\r\n  let power: number = 0;\r\n  power = attack - defence;\r\n  if (power < 0) {\r\n    power = 0;\r\n  }\r\n  notifyDamage(source.name, power, target);\r\n}\r\n","import { Rand, Pathfinding, Vector2 } from \"malwoden\";\r\nimport { Entity } from \"../entities\";\r\nimport { Direction, state } from \"../globals\";\r\nimport { Stage } from \"../stage\";\r\nimport { TerrainCollision } from \"../terrain\";\r\n\r\nexport class AISystem {\r\n  rng = new Rand.AleaRNG();\r\n\r\n  getRandDirection(): Direction | undefined {\r\n    return this.rng.nextItem([\r\n      Direction.UP,\r\n      Direction.DOWN,\r\n      Direction.LEFT,\r\n      Direction.RIGHT,\r\n      undefined,\r\n    ]);\r\n  }\r\n\r\n  loop(stage: Stage) {\r\n    for (let e of stage.entites) {\r\n      if (e.ai === \"chase\") {\r\n        this.chaseAI(e);\r\n      } else if (e.ai === \"wander\") {\r\n        this.wanderAI(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  private chaseAI(e: Entity) {\r\n    if (!e.viewShed) throw new Error(`${e.name} does not have a viewshed!`);\r\n    const playerPos = state.playerCache!.position;\r\n    if (e.viewShed.area.has(`${playerPos.x}:${playerPos.y}`)) {\r\n      const p = new Pathfinding.AStar({\r\n        topology: \"four\",\r\n        isBlockedCallback: (pos) => {\r\n          if (pos.x === playerPos.x && pos.y === playerPos.y) return false;\r\n\r\n          // Check terrain\r\n          const terrain = state.stage.map.get(pos);\r\n          if (terrain && TerrainCollision[terrain]) return true;\r\n\r\n          // Default not blocked\r\n          return false;\r\n        },\r\n      });\r\n      const route = p.compute(e.position, playerPos);\r\n      if (route && route.length >= 2) {\r\n        const direction = this.getDirectionFromVectors(route[0], route[1]);\r\n        if (!direction) {\r\n          console.warn(\"No direction found for\", route[0], route[1]);\r\n        } else {\r\n          e.wantsToMove = direction;\r\n        }\r\n      }\r\n    } else {\r\n      this.wanderAI(e);\r\n    }\r\n  }\r\n\r\n  private getDirectionFromVectors(\r\n    start: Vector2,\r\n    next: Vector2\r\n  ): Direction | undefined {\r\n    const dx = next.x - start.x;\r\n    const dy = next.y - start.y;\r\n\r\n    // Convert to direction\r\n    if (dx === 1 && dy === 0) {\r\n      return Direction.RIGHT;\r\n    } else if (dx === -1 && dy === 0) {\r\n      return Direction.LEFT;\r\n    } else if (dx === 0 && dy === 1) {\r\n      return Direction.DOWN;\r\n    } else if (dx === 0 && dy === -1) {\r\n      return Direction.UP;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private wanderAI(e: Entity) {\r\n    const dir = this.getRandDirection();\r\n    if (dir) {\r\n      e.wantsToMove = dir;\r\n    }\r\n  }\r\n}\r\n","import { restart, state } from \"../globals\";\r\nimport { Stage } from \"../stage\";\r\nimport { Log } from \"../logs\";\r\nimport { selectStage } from \"../generation/generation\";\r\n\r\nexport class StairSystem {\r\n  loop(stage: Stage) {\r\n    const player = stage.entites.find((x) => x.player);\r\n    const stairs = stage.entites.filter((x) => x.stairs);\r\n\r\n    for (let s of stairs) {\r\n      if (\r\n        s.position.x === player?.position.x &&\r\n        s.position.y === player.position.y\r\n      ) {\r\n        if (s.restart) {\r\n          restart();\r\n        } else {\r\n          Log.addEntryMid(\"Descending the stairs\");\r\n          state.stageCount++;\r\n          const newLevel = selectStage(state.stageCount);\r\n          newLevel.addEntity(player);\r\n          state.stage = newLevel;\r\n          player.position.x = newLevel.startPos.x;\r\n          player.position.y = newLevel.startPos.y;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { state } from \"../globals\";\r\n\r\nexport class CacheSystem {\r\n  loop() {\r\n    // Update the position cache\r\n    state.posCache.clear();\r\n    for (let e of state.stage.entites) {\r\n      const key = `${e.position.x}:${e.position.y}`;\r\n\r\n      if (state.posCache.has(key)) {\r\n        state.posCache.get(key)?.push(e);\r\n      } else {\r\n        state.posCache.set(key, [e]);\r\n      }\r\n\r\n      // Update the player cache\r\n      if (e.player) {\r\n        state.playerCache = e;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Entity } from \"../entities\";\r\nimport { Stage } from \"../stage\";\r\nimport { Log } from \"../logs\";\r\nimport { GameState, state } from \"../globals\";\r\nimport { Glyph, Color } from \"malwoden\";\r\n\r\nexport class CombatSystem {\r\n  ///\r\n\r\n  private makeCorpse(futureCorpse: Entity) {\r\n    if (futureCorpse.name === \"Mal\") {\r\n      Log.addEntryWarning(\"You have died.\");\r\n      state.currentGameState = GameState.GAME_LOSS;\r\n    }\r\n    Log.addEntryMid(futureCorpse.name + \" has died horribly.\");\r\n    if (state.playerCache && state.playerCache.stats && futureCorpse.stats) {\r\n      state.playerCache.stats.exp =\r\n        state.playerCache.stats?.exp + futureCorpse.stats?.exp;\r\n    }\r\n    futureCorpse.renderPriority = 3;\r\n    futureCorpse.enemy = false;\r\n    futureCorpse.collision = false;\r\n    futureCorpse.stats = undefined;\r\n    futureCorpse.ai = undefined;\r\n    futureCorpse.name += \" (corpse)\";\r\n    futureCorpse.glyph = new Glyph(\"x\", Color.White);\r\n\r\n    return futureCorpse;\r\n  }\r\n\r\n  private checkAlive(check: Entity) {\r\n    if (check.stats) {\r\n      if (check.stats.hp > 0) {\r\n        return true;\r\n      }\r\n      this.makeCorpse(check);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private applyDamage(\r\n    creature: Entity,\r\n    incDamage: { source: string; damage: number }\r\n  ) {\r\n    if (creature && creature.stats) {\r\n      creature.stats.hp = creature.stats.hp - incDamage.damage;\r\n    } else {\r\n      throw new Error(`Cannot damage ${creature.name} as it has no stats`);\r\n    }\r\n  }\r\n\r\n  loop(stage: Stage) {\r\n    for (let e of stage.entites) {\r\n      while (e.incomingDamage && e.incomingDamage.length > 0) {\r\n        //check to see if the current entity has damage being logged against them.\r\n        let incDamage = e.incomingDamage.pop()!;\r\n\r\n        this.applyDamage(e, incDamage);\r\n        Log.addEntryLow(\r\n          e.name +\r\n            \" was hit for \" +\r\n            incDamage.damage +\r\n            \" by \" +\r\n            incDamage.source\r\n        );\r\n\r\n        //confim if target is alive, if dead, makes a corpse;\r\n        this.checkAlive(e);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { FOV, Vector2 } from \"malwoden\";\r\nimport { Stage } from \"../stage\";\r\nimport { state } from \"../globals\";\r\nimport { TerrainBlocksVision } from \"../terrain\";\r\n\r\nexport class ViewSystem {\r\n  fov = new FOV.PreciseShadowcasting({\r\n    topology: \"eight\",\r\n    cartesianRange: true,\r\n    lightPasses: (pos) => {\r\n      const terrain = state.stage.map.get(pos);\r\n      if (!terrain) return true;\r\n      else return TerrainBlocksVision[terrain] === false;\r\n    },\r\n  });\r\n\r\n  loop(level: Stage) {\r\n    // Loop through entities\r\n    for (const e of level.entites) {\r\n      if (!e.vision) continue;\r\n      if (e.viewShed && e.viewShed.dirty === false) continue;\r\n\r\n      if (e.vision && (!e.viewShed || e.viewShed.dirty)) {\r\n        // Calculate\r\n        const tiles = this.fov.calculateArray(e.position, e.vision);\r\n        const area = new Map<string, Vector2>();\r\n        for (const t of tiles) {\r\n          area.set(`${t.pos.x}:${t.pos.y}`, t.pos);\r\n        }\r\n\r\n        // Set area and mark viewshed as clean\r\n        e.viewShed = {\r\n          area,\r\n          dirty: false,\r\n        };\r\n        // If we're updating the player, update the level's\r\n        // visited table\r\n        if (e.player) {\r\n          for (const t of tiles) {\r\n            if (level.fowVisited.isInBounds(t.pos)) {\r\n              level.fowVisited.set(t.pos, true);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Stage } from \"../stage\";\r\nimport { GameState, state } from \"../globals\";\r\nimport { Log } from \"../logs\";\r\n\r\nexport class ConsumableSystem {\r\n  loop(stage: Stage) {\r\n    const player = state.playerCache!;\r\n\r\n    const entitesOnSpace =\r\n      state.posCache.get(`${player.position.x}:${player.position.y}`) || [];\r\n\r\n    for (let e of entitesOnSpace) {\r\n      if (e.consumable) {\r\n        if (\r\n          e.position.x === player.position.x &&\r\n          e.position.y === player.position.y\r\n        ) {\r\n          let consumed = false;\r\n          // Player is over a consumable\r\n          if (e.consumable.hp && player.stats!.hp < player.stats!.maxHp) {\r\n            player.stats!.hp = Math.min(\r\n              player.stats!.maxHp,\r\n              player.stats!.hp + e.consumable.hp\r\n            );\r\n            Log.addEntryMid(\r\n              `You ate a ${e.name} and regained ${e.consumable.hp} hp!`\r\n            );\r\n            consumed = true;\r\n          }\r\n          if (e.consumable.exp) {\r\n            Log.addEntryMid(\r\n              `You read a ${e.name} and gained ${e.consumable.exp} exp!`\r\n            );\r\n            player.stats!.exp += e.consumable.exp;\r\n            consumed = true;\r\n          }\r\n\r\n          if (e.consumable.winCondition) {\r\n            state.currentGameState = GameState.GAME_WIN;\r\n            consumed = true;\r\n          }\r\n\r\n          // Delete if consumed\r\n          if (consumed) {\r\n            state.stage.removeEntity(e);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Terminal } from \"malwoden\";\r\n\r\nimport * as Game from \"./game\";\r\n\r\nfunction App() {\r\n  const requestRef = React.useRef<number>(NaN);\r\n\r\n  useEffect(() => {\r\n    const mount = document.getElementById(\"malwoden\")!;\r\n    const terminal = new Terminal.RetroTerminal({\r\n      width: 70,\r\n      height: 50,\r\n      imageURL: \"./font_16.png\",\r\n      charWidth: 16,\r\n      charHeight: 16,\r\n      mountNode: mount,\r\n    });\r\n\r\n    Game.init(terminal);\r\n\r\n    const loop = () => {\r\n      Game.loop();\r\n      requestRef.current = window.requestAnimationFrame(loop);\r\n    };\r\n    requestRef.current = window.requestAnimationFrame(loop);\r\n    return () => window.cancelAnimationFrame(requestRef.current);\r\n  }, []);\r\n  return (\r\n    <div\r\n      id=\"malwoden\"\r\n      style={{ display: \"flex\", justifyContent: \"center\", paddingTop: \"50px\" }}\r\n    ></div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}